import { AzureFunction, Context, HttpRequest } from '@azure/functions'
import mongoose from 'mongoose';
//const { Schema } = mongoose;
// import { User } from '../models/user';
const db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', () => {
  console.log('connected to DB');

});
mongoose.connect(process.env.CONN_STR, { useNewUrlParser: true });



function onDBSave(err: any, data: any) {
  if (err) {
    console.error(err);
  }else {
    console.log(data);
  }
}

function getUsers(): void {
  console.log('Getting users....');
}

function addUser(req: HttpRequest): void {
  const userSchema = new Schema({
    firstName: { type: [String], index: true },
    lastName: { type: [String], index: true },
    email: { type: [String], index: true },
    phone: String,
    dateCreated: { type: Date, default: Date.now },
    dateModified: { type: Date },
    isDeleted: Boolean,
    players: [String]
  });
  let User = mongoose.model('users', userSchema);
  const user = new User(req.body);
  user.save(onDBSave);
}

const httpTrigger: AzureFunction = async function (context: Context, req: HttpRequest): Promise<void> {
  context.log('HTTP trigger function processed a request.');
  const name = (req.query.name || (req.body && req.body.name));
  console.log(`Request method is ${req.method}`);
  switch (req.method) {
    case 'GET':
      getUsers();
      break;
    case 'POST':
       addUser(req);
      break;
    default:
      break;
  }
  context.res = {
    // status: 200, /* Defaults to 200 */
    body: `Name: ${name}`
  };

};

export default httpTrigger;
